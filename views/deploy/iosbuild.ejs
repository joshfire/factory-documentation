<h1>iOS Build</h1>

<h2>Description</h2>

<p>
	The <i>iOS build</i> deploy lets you build your application into a native iOS application. These native iOS applications can then be installed as real applications on iPhones, iPods and iPads (iOS devices prior to the iPhone 3GS are not supported). You must be aware of two important points:
<p>
<ul>
	<li>You should have access to an <a href="https://developer.apple.com/devcenter/ios/index.action">iOS developer account</a> with admin rights. Which means that you or your team will have to pay $99 per year to Apple.</li>

	<li>You will download the application but you still need to do the submission to the Apple App Store.</li>
</ul>
<p>
	The App Store submission is a task that is not automated. Joshfire offers its services to do it for you, look for the "<i>App Store</i>" deploy on the deploy page.
</p>

<h2>Configuration</h2>

<p>
	The four configuration parameters are very important for your application to run on the targetted devices:
</p>

<h3>Build type</h3>

<h4>Development</h4>
<p>
	Test and debug your apps on your devices. A development build should not be considered as a release of your application. A development build can be installed using the iPhone Configuration Utility or <a href="https://testflightapp.com/">TestFlight</a>.
</p>


<h4>Distribution, Ad Hoc</h4>
<p>
	Send your app to testers after adding their devices' UDIDs in the iTunes Provisioning Portal. Can also be used with services like <a href="https://testflightapp.com/">TestFlight</a>.
</p>

<h4>Distribution, App Store</h4>
<p>
	Use this build type to build your application for the iOS App Store.
</p>


<h3>Package name</h3>

<p>
	It is an unique identifier for your application, preferably in reverse URI format (such as com.[companyname].[appname]). The package name should compatible with the configuration files you have to upload next. A distribution build type cannot contain a wildcard.
</p>

<h3>Certificate (p12) file and Certificate password</h3>

<p>
	If you haven't done it before, you have to create a new certificate. This operation is done using the <i>Keychain Access</i> tool on your Mac. Follow the instructions on <a href="https://developer.apple.com/ios/my/certificates/create.action">the Certificate creation page</a>: In Keychain Access utility, select "Keychain Access > Certificate Assistant > Request a Certificate from a Certficicate Authority". Then Save this request as a file (.certSigningRequest) and upload it to your account.
<br/>
	After that the certificate has been issued by Apple, download it (it's a .cer file). Then, double click on this file, the <i>Keychain Access</i> utility opens and you should see your new certificate. Expand it, right click on the private key and select "export". This will save a .p12 file after asking for a password. It is this .p12 file and this password that you have to submit to the configuration form.
</p>

<figure>
  <img src="/img/factory-deploy-iosbuild-certificate.png" alt="screenshot of the Keychain Access utility" />
  <figcaption>Downloading the .p12 private key file from the Keychain Access utility after having imported the certificate file.</figcaption>
</figure>

<h3>Provisioning profile</h3>
<figure>
  <img src="/img/factory-deploy-iosbuild-devcenter-provisioning.png" alt="screenshot of the iOS dev center" />
  <figcaption>the iOS dev center, click on the Provisioning Portal</figcaption>
</figure>

<p>
	The provisioning profile links your application to your certificates and your test devices. To create a provisioning profile, log-in with your iOS developper admin account, go to the <i>Provisioning Portal</i> and select the <i>Provisioning</i> tab.
</p>

<figure>
  <img src="/img/factory-deploy-iosbuild-devcenter-provisioning-download.png" alt="Screenshot of the Provisioning Portal" />
  <figcaption>Create a provisioning profile from the Provisioning Portal</figcaption>
</figure>

<p>
	You will need to <a href="https://developer.apple.com/ios/manage/bundles/howto.action">create App IDs</a> and to <a href="https://developer.apple.com/ios/my/devices/howto.action">add devices</a> to this profile. It is very important that you select the device on which you want to test your application in the profile.
</p>


<h2>Testing your downloaded .ipa on your devices</h2>

<h3>Simple procedure for a small number of devices</h3>

<p>
	Simply drag and drop your provisioning profile into iTunes and then drag and drop the downloaded .ipa file. The application should appear in the "<i>apps</i>" section of your iTunes "<i>Library</i>". Then, synchronize your device applications to install it on your device.
</p>

<p>
	If you cannot synchronize your device applications on this computer (because you are using iCloud for example), you can  use the official <i><a href="http://www.apple.com/support/iphone/enterprise/">iPhone Configuration Utility</a></i> software to install it: Connect your device, add your application by drag and dropping it on the window, and then click the "install" in the device's application list.
</p>

<figure>
  <img src="/img/factory-deploy-iosbuild-utility.png" alt="Screenshot of the iPhone Configuration Utility" />
  <figcaption>the iPhone Configuration Utility</figcaption>
</figure>

<h3>Using TestFlight</h3>
<p>
	<a href="http://testflightapp.com/">TestFlight</a> allows you to manage the distribution of your application to a pool of devices. To upload your application to TestFlight, you need to sign your application with a Dev/Debug Provisioning profile.
</p>

<h2>Submitting your application to Apple</h2>

<p>
	Submittion to the App Store is done using the "<i>Application Loader</i>" utility installed with Xcode. In general you find it in the path "xcode/Applications/Utilities".
</p>
<p>
	You will need to provide additional ressources (description, keywords, large icon, iPhone and iPad screenshots). You can find a complete list and details <a href="http://ofps.oreilly.com/titles/9781449389765/ch07.html#appstore_checklist">here</a>.
</p>